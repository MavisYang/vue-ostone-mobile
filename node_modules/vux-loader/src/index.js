'use strict'

const path = require('path')
const fs = require('fs')

const utils = require('loader-utils')
const less = require('less')

const scriptLoader = path.join(__dirname, './script-loader.js')
const styleLoader = path.join(__dirname, './style-loader.js')
const templateLoader = path.join(__dirname, './template-loader.js')

module.exports = function(source) {
  const SCRIPT = utils.stringifyRequest(this, scriptLoader).replace(/"/g, '')
  const STYLE = utils.stringifyRequest(this, styleLoader).replace(/"/g, '')
  const TEMPLATE = utils.stringifyRequest(this, templateLoader).replace(/"/g, '')

  var query = utils.parseQuery(this.query)
  this.cacheable()
  if (!source) return source
  const config = utils.getLoaderConfig(this, "vux")
  config.plugins = config.plugins || []
  
  let variables = ''

  // check
  var themes = config.plugins.filter(function(plugin) {
    return plugin.name === 'less-theme'
  })

  if (themes.length) {
    this.addDependency(themes[0].files)
    variables = getLessVariables(themes[0].files)
  }

  source = addScriptLoader(source, SCRIPT)
  source = addStyleLoader(source, STYLE, variables)
  source = addTemplateLoader(source, TEMPLATE)
  return source
}


function addScriptLoader(source, SCRIPT) {
  var rs = source.replace(/require\("(.*)"\)/g, function(content) {
    // get script type
    if (/type=script/.test(content)) {
      // split loaders
      var loaders = content.split('!')
      loaders = loaders.map(function(item) {
        if (/type=script/.test(item)) {
          item = item + '!' + SCRIPT
        }
        return item
      }).join('!')
      content = loaders
    }
    return content
  })
  return rs
}

function addTemplateLoader(source, TEMPLATE) {
  var rs = source.replace(/require\("(.*)"\)/g, function(content) {
    // get script type
    if (/type=template/.test(content)) {
      // split loaders
      var loaders = content.split('!')
      loaders = loaders.map(function(item) {
        if (/type=template/.test(item)) {
          item = TEMPLATE + '!' + item
        }
        return item
      }).join('!')
      content = loaders
    }
    return content
  })
  return rs
}

function addStyleLoader(source, STYLE, variables) {
  let rs = source.replace(/require\("(.*)"\)/g, function(content) {
    if (/type=style/.test(content)) {
      var loaders = content.split('!')
      loaders = loaders.map(function(item) {
        if (/type=style/.test(item)) {
          item = STYLE + '!' + item
        }
        if (/less-loader/.test(item) && variables) {
          var params = {
            modifyVars: variables
          }
          if(/sourceMap/.test(item)) {
            params.sourceMap = true
          }
          params = JSON.stringify(params).replace(/"/g,"'")
          item = item.split('?')[0] + '?' + params
        }
        return item
      }).join('!')

      content = loaders
    }
    return content
  })
  return rs
}

/**
* use babel so component's js can be compiled
*/
module.exports.getBabelLoader = function(projectRoot, name) {
  name = name || 'vux'
  if (!projectRoot) {
    projectRoot = path.resolve(__dirname, '../../../')
    if (/\.npm/.test(projectRoot)) {
      projectRoot = path.resolve(projectRoot, '../../../')
    }
  }

  const componentPath = fs.realpathSync(projectRoot + `/node_modules/${name}/`) // https://github.com/webpack/webpack/issues/1643
  const regex = new RegExp(`node_modules.*${name}.src.*?js$`)

  return {
    test: regex,
    loader: 'babel',
    include: componentPath
  }
}

module.exports.plugins = {
  'duplicateStyle': require('../plugins/duplicate-style')
}

/**
* @todo cache theme content?
* @todo support array of themes
*/
function getLessVariables(theme) {
  var themeContent = fs.readFileSync(theme, 'utf-8')
  var variables = {}
  themeContent.split('\n').forEach(function(item) {
    var _pair = item.split(':')
    if (_pair.length < 2) return;
    var key = _pair[0].replace('\r', '').replace('@', '')
    if (!key) return;
    var value = _pair[1].replace(';', '').replace('\r', '').replace(/^\s+|\s+$/g, '')
    variables[key] = value
  })
  return variables
}


module.exports.getLessThemeParams = function (url) {
  return getLessVariables(url)
}
