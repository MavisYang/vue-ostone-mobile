'use strict'

const utils = require('loader-utils')
const yamlReader = require('js-yaml')
const fs = require('fs')
const path = require('path')

module.exports = function (source) {
  const _this = this
  this.cacheable()
  const query = utils.parseQuery(this.query)
  const config = utils.getLoaderConfig(this, "vux")
  if (!config.plugins || !config.plugins.length) {
    return source
  }
  const basename = path.basename(this.resourcePath)
  config.plugins.forEach(function (plugin) {
    // template-string-replace
    if (plugin.name === 'template-string-replace') {
      if (plugin.fn) {
        source = plugin.fn.call(plugin.fn, source)
      }
      if (plugin.params && plugin.params.length) {
        plugin.params.forEach(function(replacer) {
          source = source.replace(replacer.test, replacer.string)
        })
      }
    }
    // i18n
    if (plugin.name === 'i18n') {
      const language = plugin.language
      if (plugin.test.test(_this.resourcePath)) {
        const basename = path.basename(_this.resourcePath)
        const localeFile = _this.resourcePath.replace(basename, `locales/${language}.yml`)
        try {
          const locales = yamlReader.safeLoad(fs.readFileSync(localeFile, 'utf-8'))
          for (let i in locales) {
            source = source.replace(new RegExp(`__\\('${i}'\\)`, 'g'), `'${locales[i]}'`)
          }
          if (plugin.watch) {
            _this.addDependency(localeFile)
          }
        } catch (e) {
          console.log(`locales for ${basename} doesn't exist`)
        }
      }
    }

    if (plugin.name === 'template-string-append') {
      if (new RegExp(plugin.test).test(_this.resourcePath)) {
        var componentName = basename.replace('.vue','').toLowerCase()
        var string = plugin.fn({
          resourcePath: _this.resourcePath,
          basename: basename
        })
        if (string) {
          source = source.replace(/\s+$/g, '').replace(/\\n/g,'').replace(/<\/div>$/, string + '</div>')
        }
      }
    }
  })
  return source
}
